Write your assignment writeup in this file. Refer to the assignment PDF for details. Do not change this file name.


Q1) Declare/discuss any aspects of your client or server code that are not working.  What are your intuitions about why things are not working?  What issues you already tried and ruled out?  Given more time, what would you try next?  Detailed answers here are critical to getting partial credit for malfunctioning programs.

Our testing has not revealed any bugs so we think that both client and server side code is implemented correctly.
Although we did have optimization in mind, given more time, we would have tried to optimize a little bit more thinking of extraordinary cases (i.e. 200 character long word)



Q2) In a few sentences, describe how you tested that your code was working.

We used a lot of print statements of all values that were needed to be extracted from command-line to server and server to client.
We tested client behavior and gameplay when there were multiple clients on the server with multiple win/loss cases to see if many clients would have an impact on eachother. 
We also tested the game on two different machines with one machine being the server end and the other running multiple clients. 
With this we used the machine name rather than the IP to connect to the server.
We had a warning within the accept call where we had to cast alen to (socklen_t) to eliminate it.



Q3) What was the most challenging aspect of this assignment, and why?

Getc() was a function that was giving us a bit of trouble because it was taking in a new line character after pressing enter. We probably spent
the most time on trying to figure out a bug where "Enter guess:" was printing twice.
We also got stuck on the syntax of sending and recieving uint8_t values and getting those out of the buffer into the correct type. It was a simple cast.
Update: What we spent the most time on was error checking the client's input, ensuring it was only one character long. After getting half of it implemented with getchar(), we 
tried using scanf, fscanf, read, fgetc() and getLine(). We ended up restructuring the inner workings of out loop using a second character variable to check for the newline char
or the EOF in the user input. This was difficult because C doesn't seem to have a method that functions the way we wished for, so we tried many different implementations that 
we'd have to scrap because it got too messy at points. It was a lot of one step forward, two steps back situations.
